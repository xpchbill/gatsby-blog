@import "flex.less";

/**
 * Grid column styles by the average distribution.
 * Example:
 * 	.bx-xl-1 > * {
 *  	width: 100%;
 *  }
 *  .bx-xl-12 > * {
 *  	width: 8.33333333%;
 *  }
 */
.create-grid-col-avg(@name: xl, @n, @i: 1) when (@i =< @n) {
  .bx-@{name}-@{i} > *{
    .flex-width(@i);
  }
  .create-grid-col-avg(@name, @n, (@i + 1));
}
.create-grid-col-avg(xl, 12);


/**
 * Grid column styles by specified grid col settings.
 * Example:
 * 	bx-xl-1-1 {
 * 		width: 100%;
 * 	}
 * 	bx-xl-1-2{
 * 		width: 50%;
 * 	}
 * 	bx-xl-1-3{
 * 		width: 33.33333333%;
 * 	}
 * 	bx-xl-2-3{
 * 		width: 66.66666667%;
 * 	}
 * 	bx-xl-3-4{
 * 		width: 75%;
 * 	}...
 */
.create-grid-col(@name: xl, @n, @x: 1, @y: 1) when ((@x =< @n) and (@y =< @n) and (@x =< @y)) {
  .bx-@{name}-@{x}-@{y}{
    .flex-col(@x, @y);
  }
  .create-grid-col-rise-x(@name, @n, @x, @y);
  .create-grid-col-rise-y(@name, @n, @x, @y);
}
.create-grid-col-rise-x(@name: xl, @n, @x:1, @y: 1) when (@y = @n) {
  .create-grid-col(@name, @n, (@x + 1), (@x + 2));
}
.create-grid-col-rise-y(@name: xl, @n, @x:1, @y: 1) when (@y < @n) {
  .create-grid-col(@name, @n, @x, (@y + 1));
}
.create-grid-col(xl, 12);


/**
 * Set margin for flex cell.
 * Example:
 * 	.bx-xl-mg-8 {
 *  	width: calc(100% + 8px);
 *   	margin-left: -4px;
 *    margin-right: -4px;
 *    padding-left: 0;
 *    padding-right: 0;
 *  }
 *  .bx-xl-mg-8 > * {
 *  	padding-left: 4px;
 *   	padding-right: 4px;
 *  }
 */
.create-grid-col-margin(@name: xl, @n, @i: 0) when (@i =< @n) {
  .bx-@{name}-mg-@{i}{
    .flex("margin", @i);
  }
  .create-grid-col-margin(@name, @n, (@i + 8));
}
.create-grid-col-margin(xl, 48);

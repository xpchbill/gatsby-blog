.flex() {
  display: block;
  width: 100%;
  letter-spacing: 0;
  text-align: left;
  box-sizing: border-box;
  > * {
    display: inline-block;
  }
}

.flex(@prop) when (@prop = "flexbox") {
  display: flex;
  table-layout: auto;
  flex-direction: row;
  flex-wrap: wrap;
  justify-content: flex-start;
  align-content: center;
  align-items: center;
  column-count: auto;
  > * {
    display: inline-block;
  }
}

.flex(@prop) when (@prop = "table") {
  display: table;
  table-layout: fixed;
  flex-direction: initial;
  flex-wrap: initial;
  justify-content: initial;
  align-content: initial;
  align-items: initial;
  column-count: auto;
  > * {
    display: table-cell;
  }
}

.flex(@prop, @val) when (@prop = "margin") {
  width: calc(~"100% + @{val}px");
  margin-left: -@val / 2px;
  margin-right: -@val / 2px;
  padding-left: 0;
  padding-right: 0;
  > * {
    padding-left: @val / 2px;
    padding-right: @val / 2px;
  }
}

.flex-width(@prop) when (isnumber(@prop)) {
  width: 100% / @prop;
}


/* Grid column styles */
.flex-col() {
  min-height: 1px;
  vertical-align: middle;
  box-sizing: border-box;
}
.flex-col(@prop, @val) when (isnumber(@prop)) {
  width: 100% / @val * @prop;
}


/**
 *
 */
.bx-flex {
  .flex;
}

.bx-flexbox {
  .flex("flexbox");
}

/**
 * afx - aaui flex.
 */
.bx-col {
  .flex-col;
}

/**
 * asce - ascending
 * desc - descending
 */
.bx-order {
  &-asce {
    flex-direction: row;
    flex-wrap: wrap;
  }
  &-desc {
    flex-direction: row-reverse;
    flex-wrap: wrap-reverse;
  }
}
